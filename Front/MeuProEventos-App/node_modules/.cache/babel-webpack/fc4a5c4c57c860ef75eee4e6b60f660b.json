{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Directive, Output, HostBinding, Input, NgModule } from '@angular/core';\nimport * as i1 from '@angular/animations';\nimport { style, animate } from '@angular/animations';\nconst COLLAPSE_ANIMATION_TIMING = '400ms cubic-bezier(0.4,0.0,0.2,1)';\nconst expandAnimation = [style({\n  height: 0,\n  visibility: 'hidden'\n}), animate(COLLAPSE_ANIMATION_TIMING, style({\n  height: '*',\n  visibility: 'visible'\n}))];\nconst collapseAnimation = [style({\n  height: '*',\n  visibility: 'visible'\n}), animate(COLLAPSE_ANIMATION_TIMING, style({\n  height: 0,\n  visibility: 'hidden'\n}))];\n\nclass CollapseDirective {\n  constructor(_el, _renderer, _builder) {\n    this._el = _el;\n    this._renderer = _renderer;\n    /** This event fires as soon as content collapses */\n\n    this.collapsed = new EventEmitter();\n    /** This event fires when collapsing is started */\n\n    this.collapses = new EventEmitter();\n    /** This event fires as soon as content becomes visible */\n\n    this.expanded = new EventEmitter();\n    /** This event fires when expansion is started */\n\n    this.expands = new EventEmitter(); // shown\n\n    this.isExpanded = true;\n    this.collapseNewValue = true; // hidden\n\n    this.isCollapsed = false; // stale state\n\n    this.isCollapse = true; // animation state\n\n    this.isCollapsing = false;\n    /** turn on/off animation */\n\n    this.isAnimated = false;\n    this._display = 'block';\n    this._stylesLoaded = false;\n    this._COLLAPSE_ACTION_NAME = 'collapse';\n    this._EXPAND_ACTION_NAME = 'expand';\n    this._factoryCollapseAnimation = _builder.build(collapseAnimation);\n    this._factoryExpandAnimation = _builder.build(expandAnimation);\n  }\n\n  set display(value) {\n    this._display = value;\n\n    if (value === 'none') {\n      this.hide();\n      return;\n    }\n\n    this.isAnimated ? this.toggle() : this.show();\n  }\n  /** A flag indicating visibility of content (shown or hidden) */\n\n\n  set collapse(value) {\n    this.collapseNewValue = value;\n\n    if (!this._player || this._isAnimationDone) {\n      this.isExpanded = value;\n      this.toggle();\n    }\n  }\n\n  get collapse() {\n    return this.isExpanded;\n  }\n\n  ngAfterViewChecked() {\n    this._stylesLoaded = true;\n\n    if (!this._player || !this._isAnimationDone) {\n      return;\n    }\n\n    this._player.reset();\n\n    this._renderer.setStyle(this._el.nativeElement, 'height', '*');\n  }\n  /** allows to manually toggle content visibility */\n\n\n  toggle() {\n    if (this.isExpanded) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n  /** allows to manually hide content */\n\n\n  hide() {\n    this.isCollapsing = true;\n    this.isExpanded = false;\n    this.isCollapsed = true;\n    this.isCollapsing = false;\n    this.collapses.emit(this);\n    this._isAnimationDone = false;\n    this.animationRun(this.isAnimated, this._COLLAPSE_ACTION_NAME)(() => {\n      this._isAnimationDone = true;\n\n      if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {\n        this.show();\n        return;\n      }\n\n      this.collapsed.emit(this);\n\n      this._renderer.setStyle(this._el.nativeElement, 'display', 'none');\n    });\n  }\n  /** allows to manually show collapsed content */\n\n\n  show() {\n    this._renderer.setStyle(this._el.nativeElement, 'display', this._display);\n\n    this.isCollapsing = true;\n    this.isExpanded = true;\n    this.isCollapsed = false;\n    this.isCollapsing = false;\n    this.expands.emit(this);\n    this._isAnimationDone = false;\n    this.animationRun(this.isAnimated, this._EXPAND_ACTION_NAME)(() => {\n      this._isAnimationDone = true;\n\n      if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {\n        this.hide();\n        return;\n      }\n\n      this.expanded.emit(this);\n\n      this._renderer.removeStyle(this._el.nativeElement, 'overflow');\n    });\n  }\n\n  animationRun(isAnimated, action) {\n    if (!isAnimated || !this._stylesLoaded) {\n      return callback => callback();\n    }\n\n    this._renderer.setStyle(this._el.nativeElement, 'overflow', 'hidden');\n\n    this._renderer.addClass(this._el.nativeElement, 'collapse');\n\n    const factoryAnimation = action === this._EXPAND_ACTION_NAME ? this._factoryExpandAnimation : this._factoryCollapseAnimation;\n\n    if (this._player) {\n      this._player.reset();\n    }\n\n    this._player = factoryAnimation.create(this._el.nativeElement);\n\n    this._player.play();\n\n    return callback => {\n      var _a;\n\n      return (_a = this._player) === null || _a === void 0 ? void 0 : _a.onDone(callback);\n    };\n  }\n\n}\n\nCollapseDirective.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.0.6\",\n  ngImport: i0,\n  type: CollapseDirective,\n  deps: [{\n    token: i0.ElementRef\n  }, {\n    token: i0.Renderer2\n  }, {\n    token: i1.AnimationBuilder\n  }],\n  target: i0.ɵɵFactoryTarget.Directive\n});\nCollapseDirective.ɵdir = i0.ɵɵdefineDirective({\n  type: CollapseDirective,\n  selectors: [[\"\", \"collapse\", \"\"]],\n  hostVars: 9,\n  hostBindings: function CollapseDirective_HostBindings(rf, ctx) {\n    if (rf & 2) {\n      i0.ɵɵattribute(\"aria-hidden\", ctx.isCollapsed);\n      i0.ɵɵclassProp(\"collapse\", ctx.isCollapse)(\"in\", ctx.isExpanded)(\"show\", ctx.isExpanded)(\"collapsing\", ctx.isCollapsing);\n    }\n  },\n  inputs: {\n    display: \"display\",\n    isAnimated: \"isAnimated\",\n    collapse: \"collapse\"\n  },\n  outputs: {\n    collapsed: \"collapsed\",\n    collapses: \"collapses\",\n    expanded: \"expanded\",\n    expands: \"expands\"\n  },\n  exportAs: [\"bs-collapse\"]\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.0.6\",\n  ngImport: i0,\n  type: CollapseDirective,\n  decorators: [{\n    type: Directive,\n    args: [{\n      selector: '[collapse]',\n      exportAs: 'bs-collapse',\n      // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n      host: {\n        '[class.collapse]': 'true'\n      }\n    }]\n  }],\n  ctorParameters: function () {\n    return [{\n      type: i0.ElementRef\n    }, {\n      type: i0.Renderer2\n    }, {\n      type: i1.AnimationBuilder\n    }];\n  },\n  propDecorators: {\n    collapsed: [{\n      type: Output\n    }],\n    collapses: [{\n      type: Output\n    }],\n    expanded: [{\n      type: Output\n    }],\n    expands: [{\n      type: Output\n    }],\n    isExpanded: [{\n      type: HostBinding,\n      args: ['class.in']\n    }, {\n      type: HostBinding,\n      args: ['class.show']\n    }],\n    isCollapsed: [{\n      type: HostBinding,\n      args: ['attr.aria-hidden']\n    }],\n    isCollapse: [{\n      type: HostBinding,\n      args: ['class.collapse']\n    }],\n    isCollapsing: [{\n      type: HostBinding,\n      args: ['class.collapsing']\n    }],\n    display: [{\n      type: Input\n    }],\n    isAnimated: [{\n      type: Input\n    }],\n    collapse: [{\n      type: Input\n    }]\n  }\n});\n\nclass CollapseModule {\n  static forRoot() {\n    return {\n      ngModule: CollapseModule,\n      providers: []\n    };\n  }\n\n}\n\nCollapseModule.ɵfac = i0.ɵɵngDeclareFactory({\n  minVersion: \"12.0.0\",\n  version: \"14.0.6\",\n  ngImport: i0,\n  type: CollapseModule,\n  deps: [],\n  target: i0.ɵɵFactoryTarget.NgModule\n});\nCollapseModule.ɵmod = i0.ɵɵngDeclareNgModule({\n  minVersion: \"14.0.0\",\n  version: \"14.0.6\",\n  ngImport: i0,\n  type: CollapseModule,\n  declarations: [CollapseDirective],\n  exports: [CollapseDirective]\n});\nCollapseModule.ɵinj = i0.ɵɵngDeclareInjector({\n  minVersion: \"12.0.0\",\n  version: \"14.0.6\",\n  ngImport: i0,\n  type: CollapseModule\n});\ni0.ɵɵngDeclareClassMetadata({\n  minVersion: \"12.0.0\",\n  version: \"14.0.6\",\n  ngImport: i0,\n  type: CollapseModule,\n  decorators: [{\n    type: NgModule,\n    args: [{\n      declarations: [CollapseDirective],\n      exports: [CollapseDirective]\n    }]\n  }]\n});\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CollapseDirective, CollapseModule };","map":{"version":3,"sources":["../../../../src/collapse/collapse-animations.ts","../../../../src/collapse/collapse.directive.ts","../../../../src/collapse/collapse.module.ts","../../../../src/collapse/ngx-bootstrap-collapse.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  animate,\n  style,\n  AnimationMetadata\n} from '@angular/animations';\n\nexport const COLLAPSE_ANIMATION_TIMING = '400ms cubic-bezier(0.4,0.0,0.2,1)';\n\nexport const expandAnimation: AnimationMetadata[] = [\n  style({ height: 0, visibility: 'hidden' }),\n  animate(\n    COLLAPSE_ANIMATION_TIMING,\n    style({ height: '*', visibility: 'visible' })\n  )\n];\n\nexport const collapseAnimation: AnimationMetadata[] = [\n  style({ height: '*', visibility: 'visible' }),\n  animate(\n    COLLAPSE_ANIMATION_TIMING,\n    style({ height: 0, visibility: 'hidden' })\n  )\n];\n","import {\n  AnimationBuilder,\n  AnimationFactory,\n  AnimationPlayer\n} from '@angular/animations';\n\nimport {\n  AfterViewChecked,\n  Directive,\n  ElementRef,\n  EventEmitter,\n  HostBinding,\n  Input,\n  Output,\n  Renderer2\n} from '@angular/core';\n\nimport {\n  collapseAnimation,\n  expandAnimation\n} from './collapse-animations';\n\n@Directive({\n  selector: '[collapse]',\n  exportAs: 'bs-collapse',\n  // eslint-disable-next-line @angular-eslint/no-host-metadata-property\n  host: {\n    '[class.collapse]': 'true'\n  }\n})\nexport class CollapseDirective implements AfterViewChecked {\n  /** This event fires as soon as content collapses */\n  @Output() collapsed: EventEmitter<CollapseDirective> = new EventEmitter();\n  /** This event fires when collapsing is started */\n  @Output() collapses: EventEmitter<CollapseDirective> = new EventEmitter();\n  /** This event fires as soon as content becomes visible */\n  @Output() expanded: EventEmitter<CollapseDirective> = new EventEmitter();\n  /** This event fires when expansion is started */\n  @Output() expands: EventEmitter<CollapseDirective> = new EventEmitter();\n  // shown\n  @HostBinding('class.in')\n  @HostBinding('class.show')\n\n  isExpanded = true;\n  collapseNewValue = true;\n  // hidden\n  @HostBinding('attr.aria-hidden') isCollapsed = false;\n  // stale state\n  @HostBinding('class.collapse') isCollapse = true;\n  // animation state\n  @HostBinding('class.collapsing') isCollapsing = false;\n\n  @Input()\n  set display(value: string) {\n    this._display = value;\n    if (value === 'none') {\n      this.hide();\n      return;\n    }\n\n    this.isAnimated ? this.toggle() : this.show();\n  }\n\n  /** turn on/off animation */\n  @Input() isAnimated = false;\n  /** A flag indicating visibility of content (shown or hidden) */\n  @Input()\n  set collapse(value: boolean) {\n    this.collapseNewValue = value;\n    if (!this._player || this._isAnimationDone) {\n      this.isExpanded = value;\n      this.toggle();\n    }\n  }\n\n  get collapse(): boolean {\n    return this.isExpanded;\n  }\n\n  private _display = 'block';\n  private _isAnimationDone?: boolean;\n  private _player?: AnimationPlayer;\n  private _stylesLoaded = false;\n\n  private _COLLAPSE_ACTION_NAME = 'collapse';\n  private _EXPAND_ACTION_NAME = 'expand';\n\n  private readonly _factoryCollapseAnimation: AnimationFactory;\n  private readonly _factoryExpandAnimation: AnimationFactory;\n\n  constructor(\n    private _el: ElementRef,\n    private _renderer: Renderer2,\n    _builder: AnimationBuilder\n  ) {\n    this._factoryCollapseAnimation = _builder.build(collapseAnimation);\n    this._factoryExpandAnimation = _builder.build(expandAnimation);\n  }\n\n  ngAfterViewChecked(): void {\n    this._stylesLoaded = true;\n\n    if (!this._player || !this._isAnimationDone) {\n      return;\n    }\n\n    this._player.reset();\n    this._renderer.setStyle(this._el.nativeElement, 'height', '*');\n  }\n\n  /** allows to manually toggle content visibility */\n  toggle(): void {\n    if (this.isExpanded) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  }\n\n  /** allows to manually hide content */\n  hide(): void {\n    this.isCollapsing = true;\n    this.isExpanded = false;\n    this.isCollapsed = true;\n    this.isCollapsing = false;\n\n    this.collapses.emit(this);\n\n    this._isAnimationDone = false;\n\n    this.animationRun(this.isAnimated, this._COLLAPSE_ACTION_NAME)(() => {\n      this._isAnimationDone = true;\n      if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {\n        this.show();\n\n        return;\n      }\n      this.collapsed.emit(this);\n      this._renderer.setStyle(this._el.nativeElement, 'display', 'none');\n    });\n  }\n  /** allows to manually show collapsed content */\n  show(): void {\n    this._renderer.setStyle(this._el.nativeElement, 'display', this._display);\n\n    this.isCollapsing = true;\n    this.isExpanded = true;\n    this.isCollapsed = false;\n    this.isCollapsing = false;\n\n    this.expands.emit(this);\n\n    this._isAnimationDone = false;\n    this.animationRun(this.isAnimated, this._EXPAND_ACTION_NAME)(() => {\n      this._isAnimationDone = true;\n      if (this.collapseNewValue !== this.isCollapsed && this.isAnimated) {\n        this.hide();\n\n        return;\n      }\n      this.expanded.emit(this);\n      this._renderer.removeStyle(this._el.nativeElement, 'overflow');\n    });\n  }\n\n  animationRun(isAnimated: boolean, action: string) {\n    if (!isAnimated || !this._stylesLoaded) {\n      return (callback: () => void) => callback();\n    }\n\n    this._renderer.setStyle(this._el.nativeElement, 'overflow', 'hidden');\n    this._renderer.addClass(this._el.nativeElement, 'collapse');\n\n    const factoryAnimation = (action === this._EXPAND_ACTION_NAME)\n      ? this._factoryExpandAnimation\n      : this._factoryCollapseAnimation;\n\n    if (this._player) {\n      this._player.reset();\n    }\n\n    this._player = factoryAnimation.create(this._el.nativeElement);\n    this._player.play();\n\n    return (callback: () => void) => this._player?.onDone(callback);\n  }\n}\n","import { NgModule, ModuleWithProviders } from '@angular/core';\n\nimport { CollapseDirective } from './collapse.directive';\n\n@NgModule({\n  declarations: [CollapseDirective],\n  exports: [CollapseDirective]\n})\nexport class CollapseModule {\n  static forRoot(): ModuleWithProviders<CollapseModule> {\n    return { ngModule: CollapseModule, providers: [] };\n  }\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n"]},"metadata":{},"sourceType":"module"}